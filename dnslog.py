#!/usr/bin/env python
import socket
from dnslib import DNSRecord

if __name__ == '__main__':
    print('DNS Server Ready')

    udps = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    udps.bind(('0.0.0.0', 53))

    try:
        while True:
            try:
                packet, addr = udps.recvfrom(1024)
            except ConnectionResetError:
                continue  # closed by client
            client = addr
            try:
                client = socket.gethostbyaddr(addr[0])
            except:
                pass
            d = DNSRecord.parse(packet)
            found = str(d.q.qname) + ' from ' + str(client[0])
            print found
            #fd = open('dnslog', 'a+')
            #fd.write(found+'\n')
            #fd.close()
    except KeyboardInterrupt:
        pass
    finally:
        udps.close()
        input('Press enter...')

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

# Improvement:

#!/usr/bin/env python
import socket
from dnslib import DNSRecord

def handle_dns_query(packet, addr):
    try:
         client = socket.gethostbyaddr(addr[0])[0]
    except socket.herror:
        client = addr[0]

 d = DNSRecord.parse(packet)
    qname = str(d.q.qname)
    qtype = d.q.qtype

       print(f'Received DNS query for {qname} ({qtype}) from {client}')
    
    # Uncomment the following lines to log DNS queries to a file
    # with open('dnslog.txt', 'a+') as fd:
    #     fd.write(f'Received DNS query for {qname} ({qtype}) from {client}\n')

    # Here you can implement your own DNS resolution logic
    # ...
    
    
if __name__ == '__main__':
    print('DNS Server Ready')
    
    with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as udps:
        udps.bind(('0.0.0.0', 53))

         try:
            while True:
                try:
                    packet, addr = udps.recvfrom(1024)
                except ConnectionResetError:
                    continue  # closed by client
                    
                   
                handle_dns_query(packet, addr)

        except KeyboardInterrupt:
            pass 
 
# changes and improvements I made

1: # I added a new function handle_dns_query() which takes care of handling a received DNS query.

    
2: # In the handle_dns_query() function, I get the name of the client that made the DNS query and store it in the client variable. If the client name cannot be resolved from its IP address, the IP address is simply used.
    
3: # In the handle_dns_query() function, I added a commented out block of code that shows how DNS query information can be written to a log file.
    
4: #
    
5: #
    
6: # 
    
7: # 
    
8: #   
    
