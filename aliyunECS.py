#!/usr/bin/env python
#coding=utf-8

try:
    from aliyunsdkcore.client import AcsClient
    from aliyunsdkcore.acs_exception.exceptions import ClientException
    from aliyunsdkcore.acs_exception.exceptions import ServerException
    from aliyunsdkecs.request.v20140526.DescribeInstanceAttributeRequest import DescribeInstanceAttributeRequest
    from aliyunsdkecs.request.v20140526.DescribeRegionsRequest import DescribeRegionsRequest
    from aliyunsdkecs.request.v20140526.DescribeInstanceStatusRequest import DescribeInstanceStatusRequest
    from aliyunsdkecs.request.v20140526.RunCommandRequest import RunCommandRequest
    from aliyunsdkecs.request.v20140526.DescribeInvocationResultsRequest import DescribeInvocationResultsRequest
except Exception as e:
    print(e)
    print("请先安装aliyun sdk 库")
    print("pip3 install aliyun-python-sdk-core")
    print("pip3 install aliyun-python-sdk-ecs")
    exit()
import json
import base64
import time
#密钥信息
accessKeyId="aaaa"
accessSecret="ffff"
if not accessKeyId or not accessSecret:
    print("请填写accessKeyId与accessSecret密钥信息!")
    exit()
def get_regionid():
    client = AcsClient(accessKeyId, accessSecret, 'cn-hangzhou')
    request = DescribeRegionsRequest()
    request.set_accept_format('json')
    response = client.do_action_with_exception(request)
    return json.loads(str(response, encoding='utf-8'))["Regions"]["Region"]


def get_ecsid(regionID):
    client = AcsClient(accessKeyId, accessSecret, regionID)
    request = DescribeInstanceStatusRequest()
    request.set_accept_format('json')
    response = client.do_action_with_exception(request)
    InstanceStatuses=json.loads(str(response, encoding='utf-8'))["InstanceStatuses"]
    return InstanceStatuses["InstanceStatus"]
        

def get_status(ecsid):
    client = AcsClient(accessKeyId, accessSecret, 'cn-hangzhou')
    request = DescribeInstanceAttributeRequest()
    request.set_accept_format('json')
    request.set_InstanceId(ecsid)
    response = client.do_action_with_exception(request)
    return json.loads(str(response, encoding='utf-8'))

def exec_ecs(ecsid,command):
    regionID = get_status(ecsid)["RegionId"]
    client = AcsClient(accessKeyId, accessSecret, regionID)
    request = RunCommandRequest()
    request.set_accept_format('json')
    request.set_Type("RunShellScript")
    request.set_CommandContent(command)
    request.set_InstanceIds([ecsid])
    response = client.do_action_with_exception(request)
    return json.loads(str(response, encoding='utf-8'))



def get_result(ecsid,invokeid):
    regionID = get_status(ecsid)["RegionId"]
    client = AcsClient(accessKeyId,accessSecret,regionID)
    request = DescribeInvocationResultsRequest()
    request.set_accept_format('json')
    request.set_InstanceId(ecsid)
    request.set_InvokeId(invokeid)
    response = client.do_action_with_exception(request)
    return json.loads(str(response, encoding='utf-8'))

def listecs():
    regions = get_regionid()
    for region in regions:
        regionID = region["RegionId"]
        ecsids = get_ecsid(regionID)
        if len(ecsids) > 0:
            print("地区: ",region["LocalName"] + " - " + region["RegionId"])
        for ids in ecsids:
            info = get_status(ids["InstanceId"])
            print("---->实列ID: %s (%s)" % (ids["InstanceId"],ids["Status"]))
            print("---->公有IP: " ,info["PublicIpAddress"]["IpAddress"])
            print("---->私有IP: " ,info["VpcAttributes"]["PrivateIpAddress"]["IpAddress"])
            print("---->镜像名: ",info["ImageId"])
        print("")
def exececs(ecsid,command):
    comm = exec_ecs(ecsid,command)
    invokeid = comm["InvokeId"]
    time.sleep(1)
    print(base64.b64decode(get_result(ecsid,invokeid)["Invocation"]["InvocationResults"]["InvocationResult"][0]["Output"]).decode())
if __name__ == "__main__":    
    import sys
    args = sys.argv
    action = args[1] if len(args) > 1 else "help"
    if "list" == action:
        listecs()
    elif "exec" == action:
        ecsid = args[2]
        command = args[3]
        exececs(ecsid,command)    
    else:
        print(args[0],"list  列出ECS")
        print(args[0],"exec 实列ID 命令")
       
    
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
     
# improvements:

#!/usr/bin/env python
# coding=utf-8

import argparse
import base64
import json
import logging
import os
import time

from aliyunsdkcore.acs_exception.exceptions import ClientException, ServerException
from aliyunsdkcore.client import AcsClient
from aliyunsdkecs.request.v20140526.DescribeInstanceAttributeRequest import DescribeInstanceAttributeRequest
from aliyunsdkecs.request.v20140526.DescribeInstanceStatusRequest import DescribeInstanceStatusRequest
from aliyunsdkecs.request.v20140526.DescribeInvocationResultsRequest import DescribeInvocationResultsRequest
from aliyunsdkecs.request.v20140526.DescribeRegionsRequest import DescribeRegionsRequest
from aliyunsdkecs.request.v20140526.RunCommandRequest import RunCommandRequest

logging.basicConfig(level=logging.INFO, format="[%(levelname)s] %(message)s")
logger = logging.getLogger(__name__)

def get_credentials():
    access_key_id = os.getenv("ALICLOUD_ACCESS_KEY_ID")
    access_key_secret = os.getenv("ALICLOUD_ACCESS_KEY_SECRET")
    if not access_key_id or not access_key_secret:
    logger.error("The Alibaba Cloud credentials were not found. Please verify that they are set correctly.")
        exit(1)
    return access_key_id, access_key_secret
   
def get_regions():
    client = AcsClient(*get_credentials(), "cn-hangzhou")
    request = DescribeRegionsRequest()
    request.set_accept_format("json")
    try:

        esponse = client.do_action_with_exception(request)
    except (ClientException, ServerException) as e:
        logger.error(f"Error al obtener la lista de regiones: {e}")
        exit(1)
    return json.loads(response)["Regions"]["Region"]
    
  
def get_instances(region_id):
    client = AcsClient(*get_credentials(), region_id)
    request = DescribeInstanceStatusRequest()
    request.set_accept_format("json")
    try:
          response = client.do_action_with_exception(request)
    except (ClientException, ServerException) as e:
        logger.error(f"Error getting list of instances in region {region_id}: {e}")
        return[]
        
         return json.loads(response)["InstanceStatuses"]["InstanceStatus"]
    
 def get_instance_info(instance_id):
    client = AcsClient(*get_credentials(), "cn-hangzhou")
    request = DescribeInstanceAttributeRequest()
    request.set_accept_format("json")
    request.set_InstanceId(instance_id)
    try:   
           response = client.do_action_with_exception(request)
    except (ClientException, ServerException) as e:
           logger.error(f"Error getting information for instance {instance_id}: {e}")
        return None
    return json.loads(response)
    
def execute_command(instance_id, command):
    region_id = get_instance_info(instance_id)["RegionId"]
    client = AcsClient(*get_credentials(), region_id)
    request = RunCommandRequest()
    request.set_accept_format("json")
    request.set_Type("RunShellScript")
    request.set_CommandContent(command)
    request.set_InstanceIds([instance_id])
    try:
        response = client.do_action_with_exception(request)
    except (ClientException, ServerException) as e:
        logger.error(f"Error executing command on instance {instance_id}: {e}")
        return None
    return json.loads(response)
    
def get_command_result(instance_id, invoke_id):
    region_id = get_instance_info(instance_id)["RegionId"]
    region_id = get_instance_info(instance_id)["RegionId"]
    client = AcsClient(*get_credentials(), region_id)
    request = DescribeInvocationResultsRequest()
    request.set_accept_format("json")
    request.set_InstanceId(instance_id)
    request.set_InvokeId(invoke_id)
    try:
        response = client.do_action_with_exception(request)
    except (ClientException, ServerException) as e:
        logger.error(f"Error getting command output on instance {instance_id}: {e}")
          return None
    return json.loads(response)["Invocation"]["InvocationResults"]["InvocationResult"][0]["Output"]

def list_instances():
    for region in get_regions():
        region_name = f"{region['LocalName']} - {region['RegionId']}"
        
        instances = get_instances(region["RegionId"])
        if instances:
            logger.info(f"\nRegion: {region_name}")
        for instance in instances: 
            instance_id = instance["InstanceId"]
            instance_status = instance["Status"]
            instance_info = get_instance_info(instance_id)
            if instance_info:
                public_ip = instance_info["PublicIpAddress"]["IpAddress"]
                private_ip = instance_info["VpcAttributes"]["PrivateIpAddress"]["IpAddress"]
                image_name = instance_info["ImageId"]
                logger.info(f" --> Instance ID: {instance_id} ({instance_status})")
                logger.info(f" --> public IP: {public_ip}")
                logger.info(f" --> Private IP: {private_ip}")
                logger.info(f" --> Image: {image_name}")
        logger.info("")

def execute_instance_command(instance_id, command):
    command_response = execute_command(instance_id, command)
    if command_response:
          invoke_id = command_response["InvokeId"]
        time.sleep(1)
        result = get_command_result(instance_id, invoke_id)
        if result:
            logger.info(base64.b64decode(result).decode())
        else: 
              logger.warning(f"Could not get command output on instance {instance_id}")
   
def main():
    parser = argparse.ArgumentParser(description="Tool to execute commands on Alibaba Cloud ECS instances.")
    subparsers = parser.add_subparsers(dest="action", help="Available Actions")  
    list_parser = subparsers.add_parser("list", help="List all ECS instances.")
    exec_parser = subparsers.add_parser("exec", help="Run a command on an ECS instance.")
    exec_parser.add_argument("instance_id", help="ID of the ECS instance")
    exec_parser.add_argument("command", help="Command to execute on the ECS instance")
    
    args = parser.parse_args()
    
    if args.action == "list":
        list_instances()
    elif args.action == "exec":
        execute_instance_command(args.instance_id, args.command)

    
    if __name__ == "__main__":
    main()
    
    
   # IMPROVED FEATURES

    1. Comments:
            
            # Function that gets Alibaba Cloud credentials from environment variables
def get_credentials():
    access_key_id = os.getenv("ALICLOUD_ACCESS_KEY_ID")
    access_key_secret = os.getenv("ALICLOUD_ACCESS_KEY_SECRET")
    if not access_key_id or not access_key_secret:
        logger.error("The Alibaba Cloud credentials were not found. Please verify that they are set correctly.")
        exit(1)
    return access_key_id, access_key_secret

2. More descriptive variables:
        
    def get_instance_info(instance_id):
    client = AcsClient(*get_credentials(), "cn-hangzhou")
    request = DescribeInstanceAttributeRequest()
    request.set_accept_format("json")
    request.set_InstanceId(instance_id)
    try:
        response = client.do_action_with_exception(request)
    except (ClientException, ServerException) as e:
        logger.error(f"Error getting information for instance {instance_id}: {e}")
        return None
    return json.loads(response)

 3. Improved error handling:
        
    try:
    response = client.do_action_with_exception(request)
except (ClientException, ServerException) as e:
    logger.error(f"Error getting list of instances in region {region_id}: {e}")
    return[]

4. Main function:
def main():
    parser = argparse.ArgumentParser(description="Tool to execute commands on Alibaba Cloud ECS instances.")
    subparsers = parser.add_subparsers(dest="action", help="Available Actions")
    list_parser = subparsers.add_parser("list", help="List all ECS instances.")
    exec_parser = subparsers.add_parser("exec", help="Run a command on an ECS instance.")
    exec_parser.add_argument("instance_id", help="ID of the ECS instance")
    exec_parser.add_argument("command", help="Command to execute on the ECS instance")
    
     args = parser.parse_args()

    if args.action == "list":
        list_instances()
    elif args.action == "exec":
        execute_instance_command(args.instance_id, args.command)
        
        if __name__ == "__main__":
    main()

    
