import json
import base64
import config
import requests
import re
import sys
import time


class bigData():
    def __init__(self,keyword):
        self.fofa = False
        self.hunter = False
        self.censys = False
        self.shoadan = False
        #self.keyword = base64.b64encode(keyword.encode()).decode()
        self.keyword = keyword

    def importAuth(self):
        try:
            print("Import Auth")
            configFields = set(dir(config))
            self.fofa = True if  len(set(["fofa_key","fofa_email"]) & configFields) == 2 else False
            self.hunter = True if  len(set(["hunter_key","hunter_username"]) & configFields) == 2 else False
            self.censys = True if  len(set(["censys_key","censys_email"]) & configFields) == 2 else False
            self.shodan = True if  len(set(["shodan_key"]) & configFields) ==1  else False
        except Exception as e:
            exit(e)

    def sendReq(self,url):
        headers = {"User-Agent":"curl/7.64.1"}
        req = requests.get(url,headers=headers)
        if req.status_code == 200:
            return req.text
        return False
        

    def __SearchByfofa(self):
        if not self.fofa:
            return self.fofa
        keyword = self.keyword
        keyword = base64.b64encode(keyword.encode()).decode()
        displayFields = ["ip","port","host","title"]
        api_url = "https://fofa.info/api/v1/search/all?email={email}&key={key}&qbase64={b64_keyword}&size=10000&fields={fields}"
        url = api_url.format(email=config.fofa_email,key=config.fofa_key,b64_keyword=keyword,fields=",".join(displayFields))
        result = self.sendReq(url)
        if result:
            result = json.loads(result)
            for r in result.get('results',[]):
                print(*r)


    def __SearchByhunter(self,page=1):
        if not self.hunter or page > 5:
            return self.hunter
        reRule = {"^hash_icon=":"icon="}
        keyword = self.keyword
        for k,v in reRule.items():
            keyword = re.sub(k,v,keyword)
        keyword = base64.b64encode(keyword.encode()).decode()
        total = 0 
        #data/arr[]/url,ip,port,web_title,domain.cpmpany,number
        displayFields = ["ip","port","domain","web_title","company","number"]
        api_url = "https://hunter.qianxin.com/openApi/search?username={username}&api-key={key}&search={b64_keyword}&page={page}&page_size=100&is_web=3"
        url = api_url.format(username=config.hunter_username,key=config.hunter_key,b64_keyword=keyword,page=page)
        result = self.sendReq(url)
        if result:
            result = json.loads(result)
            if not result or not result.get("data",{}):
                return False
            datalist = result.get("data",{}).get("arr",[])
            for a in datalist:
                out = []
                for j in displayFields:
                    out.append(a.get(j,""))
                print(*out)
            total = result.get("data",{}).get("total",0)
            if int(total) > page * 50:
                time.sleep(2)
                page = page + 1
                self.__SearchByhunter(page)

    def __SearchByshodan(self,page=1):
        if not self.shodan:
            return self.shodan
        reRule = {"^body=":"http.html:","^title=":"http.title:","^icon_hash=|icon=":"http.favicon.hash:"}
        keyword = self.keyword
        for k,v in reRule.items():
            keyword = re.sub(k,v,keyword)
        keyword = requests.utils.quote(keyword)
        displayFields = ["ip_str","port","host","title","hostnames","org"]
        api_url = "https://api.shodan.io/shodan/host/search?query={keyword}&key={key}"
        url = api_url.format(key=config.shodan_key,keyword=keyword)
        result = self.sendReq(url)
        if result:
            result = json.loads(result)
            for a in result.get("matches",[]):
                out = []
                for j in displayFields:
                    out.append(a.get(j,""))
                print(*out)

        
if __name__ == '__main__':
    searchObj = bigData(sys.argv[1])
    searchObj.importAuth()
    for m in dir(searchObj):
        if "__searchby" in m.lower():
            __f = getattr(searchObj,m)
            __f()
            
          
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

# Improved version:

import argparse
import base64
import json
import logging
import re
import requests
import sys
import time
from typing import List, Dict, Union
            
class SearchFactory:
    @staticmethod
    def create(search_engine: str, keyword: str) -> Union["FofaSearch", "HunterSearch", "CensysSearch", "ShodanSearch"]:     
        
 if search_engine == "fofa":
            return FofaSearch(keyword)
        elif search_engine == "hunter":
            return HunterSearch(keyword)
        elif search_engine == "censys":
            return CensysSearch(keyword)
        elif search_engine == "shodan":
            return ShodanSearch(keyword)
        else:        
 
raise ValueError("Invalid search engine: {}".format(search_engine))


class SearchEngine:
    def __init__(self, keyword: str):
        self.keyword = keyword
        self.logger = logging.getLogger(__name__)
        self.session = requests.Session()
        
  def search(self):
        pass
        
class FofaSearch(SearchEngine):
    def search(self):
        if not self.fofa:
            return self.fofa
        keyword = self.keyword
        keyword = base64.b64encode(keyword.encode()).decode()
        displayFields = ["ip","port","host","title"]
        api_url = "https://fofa.info/api/v1/search/all?email={email}&key={key}&qbase64={keyword}&size=100&page={page}&fields={fields}".format(
              email=self.email,
            key=self.key,
            keyword=keyword,
            fields=",".join(displayFields)
        ) 
           self.logger.debug(api_url)
        result = []
for page in range(1, self.max_page + 1):
            resp = self.session.get(api_url.format(page=page))
            if resp.status_code != 200:
                self.logger.error("Failed to search Fofa with keyword {keyword} on page {page}. Status code: {status_code}, message: {message}".format(
                     keyword=self.keyword,
                    page=page,
                    status_code=resp.status_code,
                    message=resp.json().get("errmsg")
                ))
                break
            try:
                data = resp.json()
                if data["size"] == 0:
                    break
                for item in data["results"]:
                    result.append({
                        "ip": item[0],
                        "port": item[1],
                        "host": item[2],
                        "title": item[3]
                    })
                except Exception as e:
                self.logger.error("Failed to parse Fofa search result on page {page}: {message}".format(
                    page=page,
                    message=str(e)
                ))
                break
        self.fofa = result
        return self.fofa     
        class HunterSearch(SearchEngine):
            def search(self):
                 if not self.hunter:
            return self.hunter
        api_url = "https://api.hunter.io/v2/domain-search?query={query}&api_key={api_key}"
        result = []
        try:
    resp = self.session.get(api_url.format(
                query=self.keyword,
                api_key=self.api_key
            ))
         if resp.status_code != 200:
                self.logger.error("Failed to search Hunter with keyword {keyword}. Status code: {status_code}, message: {message}".format(
           keyword=self.keyword,
                    status_code=resp.status_code,
                    message=resp.json().get("errors")[0]["details"]
                ))          
                else:
                data = resp.json()
                for item in data["data"]["emails"]:
                    result.append({
                        "value": item["value"],
                        "type": item["type"],
                        "confidence": item["confidence"],
                        "sources": item["sources"]
                    })
                     except Exception as e:
            self.logger.error("Failed to search Hunter with keyword {keyword}: {message}".format(
                keyword=self.keyword,
                message=str(e)
            ))
         self.hunter = result
        return self.hunter
       class CensysSearch(SearchEngine):
    def search(self):
        if not self.censys:
            return self.censys
        api_url = "https://search.censys.io/api/v1/search/ipv4"
        result = []
        try:
        resp = self.session.post(api_url, json={"query": self.keyword}, auth=(self.uid, self.secret))
            if resp.status_code != 200:    
             self.logger.error("Failed to search Censys with keyword {keyword}. Status code: {status_code}, message: {message}".format(
                 keyword=self.keyword,
                    status_code=resp.status_code,
                    message=resp.json().get("error", {}).get("message")
                ))
               else:
                data = resp.json()
                for item in data["results"]:
                    result.append({
                        "ip": item["ip"],
                        "protocols": item["protocols"],
                        "metadata": item.get("metadata", {})
                    })
                    except Exception as e:
            self.logger.error("Failed to search Censys with keyword {keyword}: {message}".format(
                keyword=self.keyword,
                message=str(e)
            ))
           self.censys = result
        return self.censys
       class ShodanSearch(SearchEngine):
    def search(self):
       if not self.shodan:
            return self.shodan
        api_url = "https://api.shodan.io/shodan/host/search"
        result = []
        try:
          resp = self.session.get(api_url, params={"query": self.keyword, "key": self.api_key})
            if resp.status_code != 200:
            self.logger.error("Failed to search Shodan with keyword {keyword}. Status code: {status_code}, message: {message}".format(
                  keyword=self.keyword,
                    status_code=resp.status_code,
                    message=resp.json().get("error", {})
                ))
            else:
              data = resp.json()
                for item in data["matches"]:
                    result.append({
                        "ip": item["ip_str"],
                        "port": item["port"],
                        "hostnames": item.get("hostnames", []),
                        "location": item.get("location", {})
                    })
                     except Exception as e:
            self.logger.error("Failed to search Shodan with keyword {keyword}: {message}".format(
              keyword=self.keyword,
                message=str(e)
            ))
            self.shodan = result
        return self.shodan
    class SearchManager:
    def __init__(self, search_engines: List[str], keyword: str, log_level: str):
        self.search_engines = search_engines
        self.keyword = keyword
        self.logger = logging.getLogger(__name__)
        self.logger.setLevel(log_level.upper())
        self.log_level = log_level.upper()
        self.fofa = None
        self.hunter = None
        self.censys = None
        self.shodan = None
     def search(self):
        for engine in self.search_engines:
            search = SearchFactory.create(engine, self.keyword)
            result = search.search()
            setattr(self, engine, result)
            def output(self):
        output = {}
             if self.fofa:
            output["fofa"] = self.fofa
        if self.hunter:
            output["hunter"] = self.hunter
        if self.censys:
            output["censys"] = self.censys
        if self.shodan:
            output["shodan"] = self.shodan
        print(json.dumps(output, indent=4))
        
        def set_logging_level(self, level: str):
        self.logger.setLevel(level.upper())
        self.log_level = level.upper()
        
        
        def set_fofa_auth(self, email: str, key: str, max_page: int):
        self.fofa = []
        self.fofa_auth = True
        self.email = email
        self.key = key
        self.max_page = max_page
        
        def set_hunter_auth(self, api_key: str):
        self.hunter = []
        self.hunter_auth = True
        self.api_key = api_key
        
        def set_censys_auth(self, uid: str, secret: str):
        self.censys = []
        self.censys_auth = True
        self.uid = uid
        self.secret = secret
        
        def set_shodan_auth(self, api_key: str):
        self.shodan = []
        self.shodan_auth = True
        self.api_key = api_key
